from langchain.tools import tool
from services.embeddings.ba_document_embedder import BADocumentEmbedder
from typing import List, Dict


@tool
def find_related_ba_documents(query: str) -> List[Dict]:
    """
    Инструмент для семантического поиска релевантных фрагментов в документах бизнес-анализа.
    
    Этот инструмент использует двухэтапный поиск с использованием bi-encoder и cross-encoder
    для нахождения наиболее релевантных фрагментов документов. Он особенно эффективен для:
    - Поиска конкретных бизнес-требований
    - Анализа функциональных возможностей
    - Проверки соответствия требованиям
    - Ответов на вопросы о бизнес-логике продукта

    Процесс поиска:
    1. Преобразование запроса в векторное представление
    2. Первичный отбор документов с помощью bi-encoder
    3. Уточнение результатов с помощью cross-encoder
    4. Ранжирование и возврат наиболее релевантных фрагментов

    Параметры:
        query (str): Текстовый запрос для поиска. Может быть:
            - Прямым вопросом ("Как происходит процесс регистрации нового пользователя?")
            - Описанием требуемой функциональности ("Требования к форме авторизации")
            - Бизнес-требованием ("Правила валидации полей при оформлении заказа")
            - Сценарием использования ("Процесс восстановления пароля")

    Возвращает:
        List[Dict]: Список найденных фрагментов, где каждый фрагмент содержит:
            - 'content': str - Релевантный фрагмент текста
            - 'score': float - Оценка релевантности (0.0 до 1.0)
            - 'document_meta_id': int - ID документа в базе
            - 'confluence_link': str - Ссылка на документ в Confluence

    Примеры использования:
        >>> # Поиск информации о конкретной функциональности
        >>> results = find_related_ba_documents(
        ...     "Как происходит процесс подтверждения заказа?"
        ... )
        >>> for result in results:
        ...     print(f"Релевантность: {result['score']:.2f}")
        ...     print(f"Фрагмент: {result['content'][:100]}...")
        ...     print(f"Подробнее: {result['confluence_link']}\n")
        Релевантность: 0.89
        Фрагмент: Процесс подтверждения заказа включает следующие шаги: 1. Проверка наличия товаров...
        Подробнее: https://confluence.../order-processing

        >>> # Поиск требований к определенному модулю
        >>> results = find_related_ba_documents(
        ...     "Требования к системе уведомлений"
        ... )
        >>> for result in results:
        ...     if result['score'] > 0.8:  # Фильтруем только высокорелевантные результаты
        ...         print(f"Найдено в: {result['confluence_link']}")
        ...         print(result['content'])
        Найдено в: https://confluence.../notification-system
        Система уведомлений должна поддерживать следующие каналы: email, SMS, push...

    Рекомендации по использованию:
    1. Формулируйте запросы максимально конкретно
    2. Используйте ключевые слова из предметной области
    3. При необходимости уточняйте запрос на основе первых результатов
    4. Проверяйте ссылки на Confluence для получения полного контекста

    Ограничения:
    - Результаты зависят от качества векторных эмбеддингов
    - Поиск осуществляется только по загруженным документам
    - Длинные запросы могут быть менее эффективны
    - Требует корректной настройки базы данных и связей между документами
    """
    # Log agent tool activation
    print(f'bot requested find_related_ba_documents with query {query}')

    document_embedder = BADocumentEmbedder()
    return document_embedder.find_similar_ba_documents(query)